// <auto-generated />
using System;
using Examen.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Examen.Infrastructure.Migrations
{
    [DbContext(typeof(EXContext))]
    partial class EXContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CollaborateurMusicien", b =>
                {
                    b.Property<int>("CollaborateursCollaborateurId")
                        .HasColumnType("int");

                    b.Property<int>("MusiciensMusicienId")
                        .HasColumnType("int");

                    b.HasKey("CollaborateursCollaborateurId", "MusiciensMusicienId");

                    b.HasIndex("MusiciensMusicienId");

                    b.ToTable("Collaborations", (string)null);
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Collaborateur", b =>
                {
                    b.Property<int>("CollaborateurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollaborateurId"));

                    b.Property<string>("NomCollaborateur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RoleCollaborateur");

                    b.HasKey("CollaborateurId");

                    b.ToTable("Collaborateurs");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Equipement", b =>
                {
                    b.Property<int>("EquipementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipementId"));

                    b.Property<int>("EtatEquipement")
                        .HasColumnType("int");

                    b.Property<string>("PhotoEquipement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudioFk")
                        .HasColumnType("int");

                    b.Property<string>("TypeEquipement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EquipementId");

                    b.HasIndex("StudioFk");

                    b.ToTable("Equipements");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Musicien", b =>
                {
                    b.Property<int>("MusicienId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MusicienId"));

                    b.Property<DateTime>("DateCarriere")
                        .HasColumnType("datetime2");

                    b.Property<string>("NomMusicien")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumTelephone")
                        .HasColumnType("int");

                    b.HasKey("MusicienId");

                    b.ToTable("Musiciens");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Reservation", b =>
                {
                    b.Property<int>("MuscienFk")
                        .HasColumnType("int");

                    b.Property<int>("StudioFk")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateReservation")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Confirme")
                        .HasColumnType("bit");

                    b.Property<int>("NbrHeure")
                        .HasColumnType("int");

                    b.HasKey("MuscienFk", "StudioFk", "DateReservation");

                    b.HasIndex("StudioFk");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Studio", b =>
                {
                    b.Property<int>("StudioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudioId"));

                    b.Property<string>("NomStudio")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<float>("PrixHeure")
                        .HasColumnType("real");

                    b.Property<int>("Superficie")
                        .HasColumnType("int");

                    b.HasKey("StudioId");

                    b.ToTable("Studios");
                });

            modelBuilder.Entity("CollaborateurMusicien", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Collaborateur", null)
                        .WithMany()
                        .HasForeignKey("CollaborateursCollaborateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Examen.ApplicationCore.Domain.Musicien", null)
                        .WithMany()
                        .HasForeignKey("MusiciensMusicienId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Equipement", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Studio", "Studio")
                        .WithMany("Equipements")
                        .HasForeignKey("StudioFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Reservation", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Musicien", "Musicien")
                        .WithMany("Reservations")
                        .HasForeignKey("MuscienFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Examen.ApplicationCore.Domain.Studio", "Studio")
                        .WithMany("Reservations")
                        .HasForeignKey("StudioFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Musicien");

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Musicien", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Studio", b =>
                {
                    b.Navigation("Equipements");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
